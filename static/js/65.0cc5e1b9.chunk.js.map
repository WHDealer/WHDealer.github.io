{"version":3,"sources":["views/user/personalInformation/UpdatePersonalInformation.tsx","views/user/personalInformation/Profile.module.scss"],"names":["UpdatePersonalInformation","props","dispatch","useDispatch","callApi","payload","callback","callApiAction","useState","loading","setLoading","bio","setBio","data","setData","history","useHistory","show","setShow","initialValues","ref","useRef","useEffect","method","api","config","rest","getProfileUser","response","status","SUCCESS","handleClose","className","styles","changePasswordUser","title","content","up","upCallback","push","down","downCallback","bioContainer","bioTitle","cardWrapper","cardBody","innerRef","enableReinitialize","onSubmit","values","body","gender","phone_number","first_name","trim","last_name","birth_date","editProfile","msg","messages","updateMessageFailure","dirty","errors","touched","handleChange","handleBlur","handleSubmit","isValid","type","placeholder","autoComplete","maxLength","value","onBlur","onChange","name","rows","style","resize","btnWrapper","bioButton","color","outline","children","onClick","disabled","module","exports"],"mappings":"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","file":"static/js/65.0cc5e1b9.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { CTextarea, CForm, CFormGroup, CInvalidFeedback, CContainer, CCard, CCardBody } from '@coreui/react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport { useRef } from 'react';\nimport config from '../../../config';\nimport { callApiAction, SUCCESS } from '../../../store/callApi/actions';\nimport { useDispatch } from 'react-redux';\nimport { RouteComponentProps, useHistory } from 'react-router-dom';\nimport styles from './Profile.module.scss';\nimport { HBButtonFull, HBModalConfirm } from '../../../hbBaseClass';\n\nconst UpdatePersonalInformation: React.FC<RouteComponentProps> = (props) => {\n  const dispatch = useDispatch();\n  const callApi = (payload: any, callback: any) => dispatch(callApiAction(payload, callback));\n  const [loading, setLoading] = useState(false);\n  const [bio, setBio] = useState('');\n  const [data, setData] = useState<any>(null);\n  const history = useHistory();\n  const [show, setShow] = useState(false);\n\n  const validationSchema = function (values: any) {\n    return Yup.object().shape({\n      bio: Yup.string().trim().required(),\n    });\n  };\n\n  const getProfile = () => {\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.getProfileUser(),\n        loading: true,\n      },\n      (response: any) => {\n        const { data, status } = response;\n        if (status === SUCCESS) {\n          setData(data);\n          setBio(data.bio);\n        }\n      },\n    );\n  };\n\n  const initialValues = {\n    bio: bio,\n  };\n\n  const onSubmit = (values: any) => {\n    const body = {\n      gender: data.gender,\n      phone_number: data.phone_number,\n      first_name: data.first_name.trim(),\n      last_name: data.last_name.trim(),\n      birth_date: data.birth_date,\n      bio: values.bio.trim(),\n    };\n\n    setLoading(true);\n    callApi(\n      {\n        method: 'put',\n        api: config.rest.editProfile(),\n        body: body,\n        msg: config.messages.updateMessageFailure,\n      },\n      (response: any) => {\n        const { status } = response;\n        setLoading(false);\n        if (status === SUCCESS) {\n          history.push('/profile');\n        }\n      },\n    );\n  };\n\n  const ref = useRef<any>(null);\n\n  useEffect(() => {\n    getProfile();\n  }, []);\n\n  const handleClose = () => {\n    setShow(!show);\n  };\n\n  return (\n    <div className={styles.changePasswordUser}>\n      <HBModalConfirm\n        show={show}\n        handleClose={handleClose}\n        title=\"\"\n        content=\"Sind sie sicher, dass sie Abbrechen wollen? Alle Änderungen gehen dabei verloren.\"\n        up=\"Ja, abbrechen\"\n        upCallback={() => history.push('/profile')}\n        down=\"Weiter bearbeiten\"\n        downCallback={handleClose}\n      />\n      <CContainer className={styles.bioContainer}>\n        <div className={`hb-title ${styles.title} ${styles.bioTitle}`}>Biografie hinzufügen</div>\n        <CCard className={styles.cardWrapper}>\n          <CCardBody className={styles.cardBody}>\n            <Formik innerRef={ref} enableReinitialize={true} initialValues={initialValues} onSubmit={onSubmit}>\n              {({\n                values,\n                errors,\n                touched,\n                //status,\n                dirty,\n                handleChange,\n                handleBlur,\n                handleSubmit,\n                //isSubmitting,\n                isValid,\n                // handleReset,\n                // setTouched,\n                // setFieldValue,\n              }) => (\n                <CForm onSubmit={handleSubmit}>\n                  <CFormGroup>\n                    <CTextarea\n                      type=\"text\"\n                      placeholder=\"Biografie hinzufügen\"\n                      autoComplete=\"bio\"\n                      maxLength={500}\n                      value={values.bio}\n                      onBlur={handleBlur}\n                      onChange={handleChange}\n                      name=\"bio\"\n                      rows={10}\n                      className={styles.bio}\n                      style={{ resize: 'none' }}\n                    />\n                  </CFormGroup>\n\n                  <CFormGroup className={styles.btnWrapper}>\n                    {/* <CRow>\n                          <CCol xs=\"6\">\n                            <CButton\n                              color=\"primary\"\n                              className=\"px-4\"\n                              type=\"submit\"\n                              disabled={!(isValid && dirty && !loading)}\n                              style={{ width: 100 }}\n                            >\n                              {loading ? <CSpinner size=\"sm\" color=\"light\" /> : 'Update'}\n                            </CButton>\n                          </CCol>\n                        </CRow> */}\n                    <div className={styles.bioButton}>\n                      <HBButtonFull\n                        color=\"petrol\"\n                        outline\n                        children=\"Abbrechen\"\n                        type=\"button\"\n                        onClick={() => {\n                          if (values.bio === bio) {\n                            return history.push('/profile');\n                          } else setShow(true);\n                        }}\n                      />\n                    </div>\n                    <div className={styles.bioButton}>\n                      <HBButtonFull\n                        color=\"petrol\"\n                        children=\"Speichern\"\n                        type=\"submit\"\n                        disabled={!(isValid && dirty && !loading)}\n                      />\n                    </div>\n                  </CFormGroup>\n                </CForm>\n              )}\n            </Formik>\n          </CCardBody>\n        </CCard>\n      </CContainer>\n    </div>\n  );\n};\n\nexport default UpdatePersonalInformation;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"profileWrapper\":\"Profile_profileWrapper__rJ2X1\",\"profileContainer\":\"Profile_profileContainer__3wF2h\",\"title\":\"Profile_title__Z47aD\",\"bioTitle\":\"Profile_bioTitle__3ucFV\",\"leftWrapper\":\"Profile_leftWrapper__3Y16p\",\"userName\":\"Profile_userName__2wo_e\",\"avatarArea\":\"Profile_avatarArea__1KP-w\",\"avatarUser\":\"Profile_avatarUser__3LXjW\",\"overlay\":\"Profile_overlay__GczcO\",\"avatarUserButtonWrapper\":\"Profile_avatarUserButtonWrapper__obEk8\",\"avatarUserButton\":\"Profile_avatarUserButton__1BG9z\",\"formContainer\":\"Profile_formContainer__FqNPd\",\"form\":\"Profile_form__1V8TH\",\"formGroup\":\"Profile_formGroup__24ca1\",\"wrapperTitle\":\"Profile_wrapperTitle__3VZfa\",\"cardTitle\":\"Profile_cardTitle__2sNR-\",\"wrapperBtn\":\"Profile_wrapperBtn__30Mmj\",\"btnSubmit\":\"Profile_btnSubmit__1fqEK\",\"genderGroup\":\"Profile_genderGroup__2PvMZ\",\"btnNurse\":\"Profile_btnNurse__kE6_a\",\"contentNurse\":\"Profile_contentNurse__2EjQr\",\"uploadDocument\":\"Profile_uploadDocument__1-knE\",\"iconArrowNurse\":\"Profile_iconArrowNurse__1S1vJ\",\"modalBody\":\"Profile_modalBody__3o0OP\",\"modalBioTitle\":\"Profile_modalBioTitle__gQOGj\",\"mobdalBioBody\":\"Profile_mobdalBioBody__2unur\",\"btnEdit\":\"Profile_btnEdit__2APe1\",\"gender\":\"Profile_gender__3uTtV\",\"btnGender\":\"Profile_btnGender__32_RF\",\"inputText\":\"Profile_inputText__3sJ_v\",\"label\":\"Profile_label__35fsf\",\"dataOfBirth\":\"Profile_dataOfBirth__3oPMn\",\"date\":\"Profile_date__3VIeD\",\"valueDate\":\"Profile_valueDate__WB-QW\",\"valueDateDisable\":\"Profile_valueDateDisable__3hVJD\",\"iconDate\":\"Profile_iconDate__n0_jC\",\"changePasswordUser\":\"Profile_changePasswordUser__1Kv0m\",\"cardWrapper\":\"Profile_cardWrapper__2bc3n\",\"cardBody\":\"Profile_cardBody__14zzG\",\"inputPassword\":\"Profile_inputPassword__nLfcv\",\"inputTextPassword\":\"Profile_inputTextPassword__1cjGu\",\"iconPassword\":\"Profile_iconPassword__8Z-Gv\",\"invalidFeedBack\":\"Profile_invalidFeedBack__7_crA\",\"submit\":\"Profile_submit__3T48T\",\"bioContainer\":\"Profile_bioContainer__30P8I\",\"bioButton\":\"Profile_bioButton__3eVRF\",\"bioWrapper\":\"Profile_bioWrapper__D4L0N\",\"bio\":\"Profile_bio__2-1-C\",\"btnWrapper\":\"Profile_btnWrapper__HJ7yL\",\"btnGroupWrap\":\"Profile_btnGroupWrap__2Pcfh\"};"],"sourceRoot":""}