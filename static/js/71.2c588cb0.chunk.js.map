{"version":3,"sources":["views/admin/settings/constants.ts","views/admin/settings/ModalCreateMessage.tsx","views/admin/settings/ModalUpdateMessage.tsx","views/admin/settings/SettingMessages.tsx","views/admin/containers/FieldName.tsx"],"names":["APICode","statuses","colors","success","error","warning","validationSchema","values","data","Yup","shape","message_id","required","notOneOf","map","value","toString","text","text_de","descriptions","validate","getValidationSchema","validationSchemas","validateSync","abortEarly","getErrorsFromValidationError","ModalCreateMessage","props","dispatch","useDispatch","reload","handleClose","show","initialValues","className","size","centered","onClose","closeOnBackdrop","closeButton","md","enableReinitialize","onSubmit","payload","callback","newValues","popup","status","trim","duration","parseInt","body","JSON","stringify","method","api","config","rest","createMessage","loading","msg","messages","createMessageFailure","response","SUCCESS","callApiAction","errors","touched","dirty","handleChange","handleBlur","handleSubmit","isValid","isSubmitting","handleReset","setTouched","FieldName","label","width","placeholder","onChange","e","test","target","name","invalid","onBlur","maxLength","type","min","step","disabled","color","ModalUpdateMessage","updateMessage","updateMessageFailure","fields","key","_style","SettingMessages","useState","isLoading","setIsLoading","search","setSearch","setPopup","setStatus","setData","createModalData","setCreateModalData","updateModalData","setUpdateModalData","getAllMessages","data1","sort","x","y","useEffect","noItems","popupBool","filteredData","searchLowerCase","toLowerCase","filter","includes","length","style","margin","display","flexDirection","marginTop","marginBottom","position","paddingLeft","left","top","textAlign","flex","onClick","items","noItemsViewSlot","hover","striped","sorter","sorterValue","column","desc","scopedSlots","item","fontWeight","action","variant","marginRight","children","minWidth"],"mappings":"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","file":"static/js/71.2c588cb0.chunk.js","sourcesContent":["export const statuses: any = ['success', 'error', 'warning'];\nexport const colors: any = { success: '#006644', error: '#BF2600', warning: '#DF6B00' };\nexport enum APICode {\n  Success = 200,\n}\n\nexport const APP_EVENT = {\n  VIDEO_STATUS: \"VIDEO_STATUS\"\n};","import React from 'react';\nimport {\n  CModal,\n  CCol,\n  CModalHeader,\n  CRow,\n  CModalBody,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CForm,\n  CInput,\n  CFormGroup,\n  CSelect,\n  CTextarea,\n  CInvalidFeedback,\n} from '@coreui/react';\nimport { Formik } from 'formik';\nimport * as Yup from 'yup';\nimport config from '../../../config';\nimport { statuses } from './constants';\nimport { callApiAction, SUCCESS } from '../../../store/callApi/actions';\nimport { useDispatch } from 'react-redux';\nimport { getErrorsFromValidationError } from '../../../utils';\nimport FieldName from '../containers/FieldName';\n\nconst validationSchema = function (values: any, data: any) {\n  return Yup.object().shape({\n    message_id: Yup.string()\n      .required('Required.')\n      .notOneOf(\n        data.map((value: any) => value.message_id.toString()),\n        'This message id already exists. Please choose another message id.',\n      ),\n    text: Yup.string().required('Required.'),\n    text_de: Yup.string().required('Required.'),\n    descriptions: Yup.string().required('Required.'),\n  });\n};\n\nconst validate = (getValidationSchema: any, data: any) => {\n  return (values: any) => {\n    const validationSchemas = getValidationSchema(values, data);\n    try {\n      validationSchemas.validateSync(values, { abortEarly: false });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\ninterface Props {\n  reload: () => void;\n  handleClose: () => void;\n  show: boolean;\n  initialValues: any;\n  data: any;\n}\n\nconst ModalCreateMessage: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const callApi = (payload: any, callback?: (result: any) => void) => dispatch(callApiAction(payload, callback));\n  const { reload, handleClose, show, initialValues, data } = props;\n\n  const onSubmit = (values: {\n    message_id: string;\n    popup: string;\n    status: string;\n    text: string;\n    text_de: string;\n    duration: string;\n    descriptions: string;\n  }) => {\n    const newValues = {\n      message_id: values.message_id,\n      popup: values.popup === 'true' ? true : false,\n      status: values.status,\n      text: values.text.trim(),\n      text_de: values.text_de.trim(),\n      duration: values.popup === 'false' ? 0 : parseInt(values.duration),\n      descriptions: values.descriptions.trim(),\n    };\n    const body = JSON.stringify(newValues);\n    callApi(\n      {\n        method: 'post',\n        api: config.rest.createMessage(),\n        body: body,\n        loading: true,\n        msg: config.messages.createMessageFailure,\n      },\n      (response) => {\n        const { status } = response;\n        if (status === SUCCESS) {\n          reload();\n          handleClose();\n        }\n      },\n    );\n  };\n\n  return (\n    <div className=\"flex-row align-items-center\">\n      <CModal size=\"lg\" centered show={show} onClose={handleClose} closeOnBackdrop={false}>\n        <CModalHeader closeButton>Create Message</CModalHeader>\n        <CModalBody className=\"popup--update-user\">\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"12\">\n              <CCardGroup>\n                <CCard className=\"popup--update-user__card--wrapper\">\n                  <CCardBody>\n                    <Formik\n                      enableReinitialize={true}\n                      initialValues={initialValues}\n                      validate={validate(validationSchema, data)}\n                      onSubmit={onSubmit}\n                    >\n                      {({\n                        values,\n                        errors,\n                        touched,\n                        status,\n                        dirty,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                        isValid,\n                        handleReset,\n                        setTouched,\n                      }) => (\n                        <CForm onSubmit={handleSubmit}>\n                          <FieldName label=\"Message Id\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                placeholder=\"Message Id\"\n                                value={values.message_id}\n                                onChange={(e: any) => {\n                                  if (/^[0-9]*$/.test(e.target.value)) handleChange(e);\n                                }}\n                                name=\"message_id\"\n                                invalid={values.message_id !== '' && touched.message_id && !!errors.message_id}\n                                onBlur={handleBlur}\n                              />\n                              <CInvalidFeedback>{errors.message_id}</CInvalidFeedback>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Popup\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.popup} onChange={handleChange} name=\"popup\">\n                                <option>true</option>\n                                <option>false</option>\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Status\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.status} onChange={handleChange} name=\"status\">\n                                {statuses.map((value: string) => (\n                                  <option key={value}>{value}</option>\n                                ))}\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"English Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"English Message\"\n                                value={values.text}\n                                name=\"text\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"German Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"German Message\"\n                                value={values.text_de}\n                                name=\"text_de\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Duration\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                type=\"number\"\n                                min={1}\n                                step={1}\n                                disabled={values.popup === 'false'}\n                                placeholder=\"Duration\"\n                                value={values.popup === 'false' ? 0 : values.duration}\n                                name=\"duration\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Description\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                value={values.descriptions}\n                                name=\"descriptions\"\n                                maxLength={50}\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <CFormGroup className=\"d-flex justify-content-end mb-0\">\n                            <CButton color=\"primary\" className=\"px-4\" type=\"submit\" disabled={!(isValid && dirty)}>\n                              Create\n                            </CButton>\n                          </CFormGroup>\n                        </CForm>\n                      )}\n                    </Formik>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CModalBody>\n      </CModal>\n    </div>\n  );\n};\n\nexport default ModalCreateMessage;\n","import React from 'react';\nimport {\n  CModal,\n  CCol,\n  CModalHeader,\n  CRow,\n  CModalBody,\n  CButton,\n  CCard,\n  CCardBody,\n  CCardGroup,\n  CForm,\n  CInput,\n  CTextarea,\n  CFormGroup,\n  CSelect,\n} from '@coreui/react';\nimport { Formik } from 'formik';\nimport config from '../../../config';\nimport { callApiAction, SUCCESS } from '../../../store/callApi/actions';\nimport { statuses } from './constants';\nimport { useDispatch } from 'react-redux';\nimport FieldName from '../containers/FieldName';\nimport * as Yup from 'yup';\nimport { getErrorsFromValidationError } from '../../../utils';\n\ninterface Props {\n  reload: () => void;\n  handleClose: () => void;\n  show: boolean;\n  initialValues: any;\n}\n\nconst validationSchema = function (values: any) {\n  return Yup.object().shape({\n    text: Yup.string().required('Required.'),\n    text_de: Yup.string().required('Required.'),\n    descriptions: Yup.string().required('Required.'),\n  });\n};\n\nconst validate = (getValidationSchema: any) => {\n  return (values: any) => {\n    const validationSchemas = getValidationSchema(values);\n    try {\n      validationSchemas.validateSync(values, { abortEarly: false });\n      return {};\n    } catch (error) {\n      return getErrorsFromValidationError(error);\n    }\n  };\n};\n\nconst ModalUpdateMessage: React.FC<Props> = (props) => {\n  const dispatch = useDispatch();\n  const callApi = (payload: any, callback?: (result: any) => void) => dispatch(callApiAction(payload, callback));\n  const { reload, handleClose, show, initialValues } = props;\n\n  const onSubmit = (values: {\n    message_id: string;\n    popup: string;\n    status: string;\n    text: string;\n    text_de: string;\n    duration: string;\n    descriptions: string;\n  }) => {\n    const newValues = {\n      popup: values.popup === 'true' ? true : false,\n      status: values.status,\n      text: values.text.trim(),\n      text_de: values.text_de.trim(),\n      duration: values.popup === 'false' ? 0 : parseInt(values.duration),\n      descriptions: values.descriptions.trim(),\n    };\n    const body = JSON.stringify(newValues);\n    callApi(\n      {\n        method: 'put',\n        api: config.rest.updateMessage(values.message_id),\n        body: body,\n        loading: true,\n        msg: config.messages.updateMessageFailure,\n      },\n      (response) => {\n        const { status } = response;\n        if (status === SUCCESS) {\n          reload();\n          handleClose();\n        }\n      },\n    );\n  };\n\n  return (\n    <div className=\"flex-row align-items-center\">\n      <CModal size=\"lg\" centered show={show} onClose={handleClose} closeOnBackdrop={false}>\n        <CModalHeader closeButton>Update Message</CModalHeader>\n        <CModalBody className=\"popup--update-user\">\n          <CRow className=\"justify-content-center\">\n            <CCol md=\"12\">\n              <CCardGroup>\n                <CCard className=\"popup--update-user__card--wrapper\">\n                  <CCardBody>\n                    <Formik\n                      enableReinitialize={true}\n                      initialValues={initialValues}\n                      validate={validate(validationSchema)}\n                      onSubmit={onSubmit}\n                    >\n                      {({\n                        values,\n                        errors,\n                        touched,\n                        status,\n                        dirty,\n                        handleChange,\n                        handleBlur,\n                        handleSubmit,\n                        isSubmitting,\n                        isValid,\n                        handleReset,\n                        setTouched,\n                      }) => (\n                        <CForm onSubmit={handleSubmit}>\n                          <FieldName label=\"Message Id\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput disabled type=\"number\" value={values.message_id} name=\"message_id\" />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Popup\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.popup} onChange={handleChange} name=\"popup\">\n                                <option>true</option>\n                                <option>false</option>\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Status\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CSelect value={values.status} onChange={handleChange} name=\"status\">\n                                {statuses.map((value: string) => (\n                                  <option key={value}>{value}</option>\n                                ))}\n                              </CSelect>\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"English Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"English Message\"\n                                value={values.text}\n                                name=\"text\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"German Message\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                required\n                                maxLength={200}\n                                type=\"text\"\n                                placeholder=\"German Message\"\n                                value={values.text_de}\n                                name=\"text_de\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Duration\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CInput\n                                type=\"number\"\n                                min={1}\n                                disabled={values.popup === 'false' || !values.popup}\n                                placeholder=\"Duration\"\n                                value={values.popup === 'false' || !values.popup ? 0 : values.duration}\n                                name=\"duration\"\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <FieldName label=\"Description\" width={140}>\n                            <CFormGroup className=\"m-0\">\n                              <CTextarea\n                                type=\"text\"\n                                placeholder=\"Description\"\n                                value={values.descriptions}\n                                name=\"descriptions\"\n                                maxLength={50}\n                                onChange={handleChange}\n                              />\n                            </CFormGroup>\n                          </FieldName>\n                          <CFormGroup className=\"d-flex justify-content-end mb-0\">\n                            <CButton color=\"primary\" className=\"px-4\" type=\"submit\" disabled={!(isValid && dirty)}>\n                              Update\n                            </CButton>\n                          </CFormGroup>\n                        </CForm>\n                      )}\n                    </Formik>\n                  </CCardBody>\n                </CCard>\n              </CCardGroup>\n            </CCol>\n          </CRow>\n        </CModalBody>\n      </CModal>\n    </div>\n  );\n};\n\nexport default ModalUpdateMessage;\n","import React, { useState, useEffect } from 'react';\nimport { CDataTable, CButton, CInput, CSelect } from '@coreui/react';\nimport config from '../../../config';\nimport { callApiAction, SUCCESS } from '../../../store/callApi/actions';\nimport { statuses, colors } from './constants';\nimport ModalCreateMessage from './ModalCreateMessage';\nimport ModalUpdateMessage from './ModalUpdateMessage';\nimport { useDispatch } from 'react-redux';\nimport { RouteComponentProps } from 'react-router-dom';\n\nconst fields = [\n  { key: 'message_id', label: 'Id', _style: { width: '1%' } },\n  { key: 'popup', label: 'Popup', _style: { width: '1%' } },\n  { key: 'status', label: 'Status', _style: { width: '1%' } },\n  { key: 'text', label: 'English Message', _style: { width: '20%' } },\n  { key: 'text_de', label: 'German Message', _style: { width: '20%' } },\n  { key: 'duration', label: 'Duration', _style: { width: '1%' } },\n  { key: 'descriptions', label: 'Description', _style: { width: '20%' } },\n  { key: 'action', label: 'Action', _style: { width: '1%' } },\n];\n\nconst SettingMessages: React.FC<RouteComponentProps> = () => {\n  const dispatch = useDispatch();\n  const callApi = (payload: any, callback?: (result: any) => void) => dispatch(callApiAction(payload, callback));\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [search, setSearch] = useState('');\n  const [popup, setPopup] = useState('');\n  const [status, setStatus] = useState('');\n  const [data, setData] = useState([]);\n  const [createModalData, setCreateModalData] = useState({ show: false, initialValues: {} });\n  const [updateModalData, setUpdateModalData] = useState({ show: false, initialValues: {} });\n\n  const reload = () => {\n    setIsLoading(true);\n    callApi(\n      {\n        method: 'get',\n        api: config.rest.getAllMessages(),\n      },\n      (response) => {\n        const { status } = response;\n        const data1 = response.data;\n        if (status === SUCCESS)\n          setData(\n            data1\n              .map((value: any) => {\n                return { ...value, message_id: parseInt(value.message_id) };\n              })\n              .sort((x: any, y: any) => y.message_id - x.message_id),\n          );\n        setIsLoading(false);\n      },\n    );\n  };\n\n  useEffect(() => {\n    reload();\n  }, []);\n\n  let noItems = <div />;\n\n  const popupBool = popup === 'true' ? true : false;\n\n  let filteredData = data;\n  if (search !== '') {\n    const searchLowerCase = search.toLowerCase();\n    filteredData = filteredData.filter(\n      (value: any) =>\n        value.text.toLowerCase().includes(searchLowerCase) || value.message_id.toString().includes(searchLowerCase),\n    );\n  }\n  if (popup !== '') filteredData = filteredData.filter((value: any) => value.popup === popupBool);\n  if (status !== '') filteredData = filteredData.filter((value: any) => value.status === status);\n\n  if (!isLoading) {\n    if (filteredData.length === 0) noItems = <div>No items found!</div>;\n  }\n\n  return (\n    <div style={{ width: '90%', margin: '10px auto' }}>\n      <ModalCreateMessage\n        data={data}\n        show={createModalData.show}\n        initialValues={createModalData.initialValues}\n        handleClose={() => setCreateModalData({ show: false, initialValues: {} })}\n        reload={reload}\n      />\n      <ModalUpdateMessage\n        show={updateModalData.show}\n        initialValues={updateModalData.initialValues}\n        handleClose={() => setUpdateModalData({ show: false, initialValues: {} })}\n        reload={reload}\n      />\n\n      <div>\n        <div style={{ display: 'flex', flexDirection: 'row', marginTop: 20, marginBottom: 30 }}>\n          <div className=\"mr-3\" style={{ position: 'relative', width: 220 }}>\n            <CInput\n              style={{ width: 220, position: 'absolute', paddingLeft: 32 }}\n              type=\"text\"\n              placeholder=\"search\"\n              value={search}\n              maxLength={50}\n              onChange={(e: any) => setSearch(e.target.value)}\n            />\n            <i style={{ position: 'absolute', left: 10, top: 11, color: '#777' }} className=\"fa fa-search icon\"></i>\n          </div>\n          <CSelect\n            className=\"mr-3\"\n            style={{ width: 160 }}\n            value={popup}\n            onChange={(e: any) => setPopup(e.target.value)}\n          >\n            <option value=\"\">Show popup?</option>\n            <option>true</option>\n            <option>false</option>\n          </CSelect>\n          <CSelect style={{ width: 160 }} value={status} onChange={(e: any) => setStatus(e.target.value)}>\n            <option value=\"\">Status?</option>\n            {statuses.map((value: string) => (\n              <option key={value}>{value}</option>\n            ))}\n          </CSelect>\n          <div style={{ textAlign: 'right', flex: 1 }}>\n            <CButton\n              color=\"primary\"\n              onClick={() => {\n                setCreateModalData({\n                  show: true,\n                  initialValues: {\n                    message_id: '',\n                    popup: 'true',\n                    status: 'success',\n                    text: '',\n                    text_de: '',\n                    duration: 5,\n                    descriptions: '',\n                  },\n                });\n              }}\n            >\n              Create message\n            </CButton>\n          </div>\n        </div>\n      </div>\n      <CDataTable\n        items={filteredData}\n        fields={fields}\n        loading={isLoading}\n        noItemsViewSlot={noItems}\n        hover\n        striped\n        sorter\n        sorterValue={{ column: 'message_id', desc: 'true' }}\n        scopedSlots={{\n          popup: (item: any) => <td>{item.popup ? 'true' : 'false'}</td>,\n          status: (item: any) => <td style={{ fontWeight: 'bold', color: colors[item.status] }}>{item.status}</td>,\n          duration: (item: any) => <td>{item.popup === false ? 0 : item.duration}</td>,\n          action: (item: any) => (\n            <td className=\"py-2\">\n              <CButton\n                color=\"primary\"\n                variant=\"outline\"\n                shape=\"square\"\n                size=\"sm\"\n                onClick={() => {\n                  setUpdateModalData({ show: true, initialValues: item });\n                }}\n              >\n                <i className=\"fas fa-pencil-alt\"> </i>\n              </CButton>\n            </td>\n          ),\n        }}\n      />\n      {filteredData.length !== 0 && (\n        <div style={{ textAlign: 'right', marginRight: 100 }}>Total: {filteredData.length}</div>\n      )}\n    </div>\n  );\n};\n\nexport default SettingMessages;\n","import React from 'react';\n\ninterface Props {\n  className?: string;\n  centered?: boolean;\n  label: string;\n  width?: number;\n  style?: any;\n}\n\nconst FieldName: React.FC<Props> = (props) => {\n  let { className, label, children, width, centered, style } = props;\n  width = width || 110;\n\n  return (\n    <div className={`d-flex mb-3 ${centered ? 'align-items-center' : ''} ${className || ''}`} style={style}>\n      <div style={{ minWidth: width, marginTop: 6 }}>{label}</div>\n      <div style={{ width: `calc(100% - ${width}px)` }}>{children}</div>\n    </div>\n  );\n};\n\nexport default FieldName;\n"],"sourceRoot":""}